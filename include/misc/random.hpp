/*
 * GHOST (General meta-Heuristic Optimization Solving Tool) is a C++ library 
 * designed to help developers to model and implement optimization problem 
 * solving. It contains a meta-heuristic solver aiming to solve any kind of 
 * combinatorial and optimization real-time problems represented by a CSP/COP. 
 *
 * GHOST has been first developped to help making AI for the RTS game
 * StarCraft: Brood war, but can be used for any kind of applications where 
 * solving combinatorial and optimization problems within some tenth of 
 * milliseconds is needed. It is a generalization of the Wall-in project.
 * Please visit https://github.com/richoux/GHOST for further information.
 * 
 * Copyright (C) 2014-2017 Florian Richoux
 *
 * This file is part of GHOST.
 * GHOST is free software: you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as published 
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * GHOST is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with GHOST. If not, see http://www.gnu.org/licenses/.
 */


#pragma once

#include <random>

using namespace std;

namespace ghost
{
  //! Random is the class coding pseudo-random generators used in GHOST
  /*!
   * Random use the C++11 Mersenne Twister (mt19937) as a
   * pseudo-random generator.
   *
   * Seeds are generated by C++11 random_device.
   */
  class Random
  {
    random_device				_rd;
    mutable mt19937				_rng;
    mutable uniform_int_distribution<int>	_unif_dist;
    
  public:
    Random() : _rng( _rd() ) { }

    //! Inline function to return a random value in [0, limit[
    /*!
     * getRandNum uses a uniform_int_distribution<int> to compute
     * and return a pseudo-random value from the range [0, limit[
     *
     * \param limit The upper bound of the range [0, limit[ from where a random value is computed.
     * \return A pseudo-random value in the range [0, limit[
     */
    inline int get_random_number( int limit ) const { return ( _unif_dist( _rng ) % limit ); }
  };
}
